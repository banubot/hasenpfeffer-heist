{"version":3,"sources":["logo.svg","components/Character.js","components/CharSelect.js","components/Start.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Character","props","className","src","name","alt","fave","description","CharSelect","i","charData","require","characters","length","push","id","Start","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,qiBCE5B,SAASC,EAAUC,GAChC,OAAO,yBAAKC,UAAU,WACpB,gCACE,yBAAKA,UAAU,UAAUC,IAAK,MAAQF,EAAMG,KAAO,OAAQC,IAAI,cAC/D,wBAAIH,UAAU,YACXD,EAAMG,MAET,wBAAIF,UAAU,YAAd,cACcD,EAAMK,MAEpB,uBAAGJ,UAAU,WACVD,EAAMM,eCTA,SAASC,EAAWP,GACjC,IAEIQ,EAFAC,EAAWC,EAAQ,IACnBC,EAAa,GAEjB,IAAKH,EAAI,EAAGA,EAAIC,EAASG,OAAQJ,IAC/BG,EAAWE,KAAK,kBAACd,EAAD,CAAWI,KAAMM,EAASD,GAAGL,KAAMG,YAAaG,EAASD,GAAGF,YAAaD,KAAMI,EAASD,GAAGH,QAE7G,OAAO,yBAAKJ,UAAU,cACpB,wBAAIa,GAAG,aAAP,4BAGCH,EACD,4BAAQG,GAAG,UAAX,WCbW,SAASC,EAAMf,GAE5B,OAAO,yBAAKc,GAAG,SACb,gCACE,wBAAIA,GAAG,SAAP,uBAGA,uBAAGA,GAAG,WAAN,+IAGA,kBAACP,EAAD,QCASS,MARf,WACE,OACE,yBAAKf,UAAU,OACb,kBAACc,EAAD,QCIcE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c5cc1139.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport default function Character(props) {\n  return <div className=\"charDiv\">\n    <center>\n      <img className=\"charPic\" src={\"../\" + props.name + \".png\"} alt=\"character\" />\n      <h1 className=\"charName\">\n        {props.name}\n      </h1>\n      <h2 className=\"charFave\">\n        Favourite: {props.fave}\n      </h2>\n      <p className=\"charDes\">\n        {props.description}\n      </p>\n    </center>\n  </div>\n}","import Character from './Character';\n\nimport React from 'react';\n\nexport default function CharSelect(props) {\n  let charData = require('../data/Characters.json')\n  let characters = [];\n  let i;\n  for (i = 0; i < charData.length; i++) {\n    characters.push(<Character name={charData[i].name} description={charData[i].description} fave={charData[i].fave} />);\n  }\n  return <div className=\"charSelect\">\n    <h2 id=\"selectTag\">\n      Choose your character...\n      </h2>\n    {characters}\n    <button id=\"submit\">\n      Start!\n    </button>\n  </div>\n\n} ","import React from 'react';\nimport CharSelect from './CharSelect';\n\nexport default function Start(props) {\n\n  return <div id=\"start\">\n    <center>\n      <h1 id=\"title\">\n        Hasenpfeffer HEIST!\n      </h1>\n      <p id=\"gameDes\">\n        Become the chubbiest bunny in the meadow when you face off against the other buns to steal the most from the garden - but don't get caught!\n      </p>\n      <CharSelect />\n    </center>\n  </div>\n\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Start from './components/Start';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Start />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}