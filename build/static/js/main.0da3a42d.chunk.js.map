{"version":3,"sources":["components/Game.js","App.js","serviceWorker.js","reducers/score.js","reducers/playing.js","reducers/strike.js","reducers/log.js","reducers/index.js","index.js"],"names":["playerName","playerNum","Game","rabbitPicName","faveVeg","allVegs","require","socket","io","on","clientNum","newState","setGameState","JSON","parse","console","log","document","getElementById","style","display","useState","gameState","useEffect","isPlaying","classList","add","className","id","GameIntro","RoomSelect","CharSelect","FaveVegSelect","GameMain","src","alt","RoomCodeHeader","Strikes","Players","Inventory","Chat","StashDecision","StealDecision","EndGame","winnerName","winnerScore","i","players","player","score","name","getWinner","Object","values","map","rabbitImg","num","turn","getStealablePlayers","paws","veg","class","onClick","opponentNum","vegName","emit","room","vegImg","points","stealable","opponent","length","push","stashSelect","strikes","Actions","Paws","Burrow","burrow","actions","action","mapAction","mapActions","chat","event","type","description","mapEvent","placeholder","newChatText","value","submitNewChat","count","isTheirTurn","ActionDig","handleSteal","ActionSteal","handleStash","ActionStash","handleBlock","ActionBlock","ActionEndTurn","handleStart","newGame","joinGame","init","code","characters","handleSelectCharacter","vegs","handleSelectFaveVeg","e","target","handleDig","handleEndTurn","App","Boolean","window","location","hostname","match","scoreReducer","state","payload","playingReducer","strikeReducer","logReducer","reducers","combineReducers","strike","playing","store","createStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2mCAGIA,EACAC,E,uEAEW,SAASC,IACtB,IAAIC,EACAC,EACEC,EAAUC,EAAQ,IAClBC,EAASC,IAAG,gDAElBD,EAAOE,GAAG,aAiaV,SAAyBC,GACvBT,EAAYS,KAjadH,EAAOE,GAAG,aAodV,SAAyBE,GACvBC,EAAaC,KAAKC,MAAMH,OApd1BJ,EAAOE,GAAG,WAijBV,WACEM,QAAQC,IAAI,WACZC,SAASC,eAAe,WAAWC,MAAMC,QAAU,WA3jBxB,MAYKC,mBAAS,CACzC,KAAQ,GACR,WAAa,EACb,QAAW,EACX,QAAW,GACX,KAAQ,GACR,KAAQ,IAlBmB,mBAYtBC,EAZsB,KAYXV,EAZW,KAkC7B,OAdAW,qBAAU,WACRN,SAASC,eAAe,cAAcC,MAAMC,QAAU,OACtDH,SAASC,eAAe,cAAcC,MAAMC,QAAU,OACtDH,SAASC,eAAe,aAAaC,MAAMC,QAAU,OACjDE,EAAUE,WACZP,SAASC,eAAe,YAAYC,MAAMC,QAAU,QACpDH,SAASC,eAAe,SAASC,MAAMC,QAAU,OACjDH,SAASC,eAAe,SAASO,UAAUC,IAAI,kBAE/CT,SAASC,eAAe,YAAYC,MAAMC,QAAU,OACpDH,SAASC,eAAe,SAASC,MAAMC,QAAU,WAElD,CAACE,IAGF,gCACE,wBAAIK,UAAU,aAAaC,GAAG,SAA9B,uBAGA,kBAACC,EAAD,MACA,yBAAKD,GAAG,cACN,kBAACE,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAEF,kBAACC,EAAD,OAIJ,SAASA,IACP,OACE,yBAAKL,GAAG,YACN,yBAAKA,GAAG,SAASM,IAAI,eAAeC,IAAI,WACxC,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAKN,SAASA,IACP,OACE,yBAAKhB,UAAU,WAAWC,GAAG,WAC3B,yBAAKD,UAAU,aAEf,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YAAf,eAwBR,WACE,IAAIiB,EAAa,GACbC,EAAc,EAClB,IAAK,IAAIC,KAAKxB,EAAUyB,QAAS,CAC/B,IAAIC,EAAS1B,EAAUyB,QAAQD,GAC3BE,EAAOC,QAAUJ,EACnBD,GAAc,IAAMI,EACXA,EAAOC,MAAQJ,IACxBA,EAAcG,EAAOC,MACrBL,EAAaI,EAAOE,MAGxB,OAAON,EAnCcO,GADf,UAGA,yBAAKxB,UAAU,WACZyB,OAAOC,OAAO/B,EAAUyB,SAASO,KAAI,SAACN,GAAD,OACpC,6BACE,yBAAKrB,UAAU,iBAAiBC,GAAG,kBAAkBM,IAAK,cAAgBc,EAAOO,UAAY,OAAQpB,IAAI,WACzG,uBAAGR,UAAW,cAAgBqB,EAAOQ,MAAQlC,EAAUmC,KAAO,WAAa,KACxET,EAAOE,MAEV,uBAAGvB,UAAW,SACZ,qCAGCqB,EAAOC,cAyBxB,SAASP,IACP,OACE,yBAAKf,UAAU,WAAWC,GAAG,iBAC3B,yBAAKD,UAAU,aAEf,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YAAf,sCAGA,yBAAKA,UAAU,WACZ+B,IAAsBJ,KAAI,SAACN,GAAD,OACzB,yBAAKrB,UAAU,iBACb,yBAAKA,UAAU,iBAAiBC,GAAG,kBAAkBM,IAAK,cAAgBc,EAAOO,UAAY,OAAQpB,IAAI,WACzG,yBAAKR,UAAU,eACZqB,EAAOW,KAAKL,KAAI,SAACM,GAAD,OACf,yBAAKC,MAAM,aACT,yBAAKlC,UAAU,mBAAmBmC,QAAS,kBAgb1CC,EAhb4Df,EAAOQ,IAgbtDQ,EAhb2DJ,EAAIV,KAib/FnC,QAAQC,IAAI+C,EAAcC,GAC1B/C,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,YACzDb,EAAO0D,KAAK,QAAS3C,EAAU4C,KAAMjE,EAAW8D,EAAaC,GAH/D,IAAqBD,EAAaC,GAhbsE9B,IAAG,wBAAmB0B,EAAIO,UAC9G,yBAAKxC,UAAU,oBACZiC,EAAIQ,oBAa3B,SAASV,IACP,IAAIW,EAAY,GAChB,IAAK,IAAIvB,KAAKxB,EAAUyB,QAAS,CAC/B,IAAIuB,EAAWhD,EAAUyB,QAAQD,GAC7BwB,EAASd,MAAQvD,GAAaqE,EAASX,KAAKY,OAAS,GACvDF,EAAUG,KAAKlD,EAAUyB,QAAQD,IAIrC,OAAOuB,EAGT,SAAS5B,IACP,IAAIO,EAAS1B,EAAUyB,QAAQ9C,GAC/B,OAAI+C,EAEA,yBAAKrB,UAAU,WAAWC,GAAG,iBAC3B,yBAAKD,UAAU,aAEf,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YAAf,sCAGA,yBAAKA,UAAU,WACZqB,EAAOW,KAAKL,KAAI,SAACM,GAAD,OACf,yBAAKC,MAAM,UACT,yBAAKlC,UAAU,YAAYmC,QAAS,kBA6YpD,SAAqBF,GACnB3C,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,OACzDb,EAAO0D,KAAK,QAAS3C,EAAU4C,KAAMjE,EAAW2D,GA/YQa,CAAYb,EAAIV,OAAOhB,IAAG,wBAAmB0B,EAAIO,UAC3F,yBAAKxC,UAAU,aACZiC,EAAIQ,eASd,KAGT,SAAS/B,IACP,OACE,yBAAKT,GAAG,WACN,uCAGC,IAAMN,EAAUoD,SAKvB,SAAStC,IACP,OACE,yBAAKR,GAAG,YACN,yCAGC,IAAMN,EAAU4C,MAKvB,SAAS5B,IACP,OACE,yBAAKV,GAAG,WACLwB,OAAOC,OAAO/B,EAAUyB,SAASO,KAAI,SAACN,GAAD,OACpC,6BACE,yBAAKrB,UAAU,iBAAiBC,GAAG,kBAAkBM,IAAK,cAAgBc,EAAOO,UAAY,OAAQpB,IAAI,WACzG,uBAAGR,UAAW,cAAgBqB,EAAOQ,MAAQlC,EAAUmC,KAAO,WAAa,KACxET,EAAOE,MAEV,uBAAGvB,UAAW,SACZ,qCAGCqB,EAAOC,YASpB,SAASV,IACP,OACE,yBAAKX,GAAG,aACN,kBAAC+C,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAKN,SAASA,IACP,IAAI7B,EAAS1B,EAAUyB,QAAQ9C,GAC/B,OAAI+C,GACFjC,QAAQC,IAAIgC,EAAO8B,QAEjB,yBAAKlD,GAAG,UACN,uBAAGD,UAAU,mBAAb,UAGA,6BACCqB,EAAO8B,OAAOxB,KAAI,SAACM,GAAD,OACjB,yBAAKC,MAAM,UACT,yBAAKlC,UAAU,YAAYO,IAAG,wBAAmB0B,EAAIO,UACrD,yBAAKxC,UAAU,aACZiC,EAAIQ,cAOV,KAIT,SAASQ,IACP,IAAI5B,EAAS1B,EAAUyB,QAAQ9C,GAC/B,OAAI+C,GACFjC,QAAQC,IAAIgC,EAAOW,MAEjB,yBAAK/B,GAAG,QACN,uBAAGD,UAAU,mBAAb,QAGA,6BACCqB,EAAOW,KAAKL,KAAI,SAACM,GAAD,OACf,yBAAKC,MAAM,UACT,yBAAKlC,UAAU,YAAYO,IAAG,wBAAmB0B,EAAIO,UACrD,yBAAKxC,UAAU,aACZiC,EAAIQ,cAOV,KAGT,SAASO,IACP,OACE,yBAAK/C,GAAG,WACN,uBAAGD,UAAU,mBAAb,WA+BN,WACE,IAAIoD,EAAU,GACV/B,EAAS1B,EAAUyB,QAAQ9C,GAC/B,GAAI+C,EACF,IAAK,IAAIgC,KAAUhC,EAAO+B,QACxBA,EAAQP,KAAKS,EAAUD,EAAQhC,EAAO+B,QAAQC,KAGlD,OAAQD,EApCHG,IAKP,SAAS1C,IACP,OACE,yBAAKZ,GAAG,QACN,yBAAKA,GAAG,WACLN,EAAU6D,KAAK7B,KAAI,SAAA8B,GAAK,OACvB,oCACE,yBAAKzD,UAAU,aAgD3B,SAAkByD,GAChB,OAAQA,EAAMC,MACZ,IAAK,OACH,OACE,yBAAK1D,UAAU,YACb,2BACGyD,EAAMpC,QAFX,KAIKoC,EAAME,aAGf,IAAK,OACH,OACE,yBAAK3D,UAAU,QACb,2BACGyD,EAAMpC,OACNoC,EAAME,cAIf,QACE,QApESC,CAASH,IAEZ,kCAIN,yBAAKxD,GAAG,gBACN,2BAAOyD,KAAK,SAASzD,GAAG,YAAY4D,YAAY,wBAChD,4BAAQ1B,QAAS,kBAyKzB,WACE,IAAI2B,EAAcxE,SAASC,eAAe,aAAawE,MACvDzE,SAASC,eAAe,aAAawE,MAAQ,GAC7CnF,EAAO0D,KAAK,UAAW3C,EAAU4C,KAAMlE,EAAYyF,GA5KtBE,IAA2B/D,GAAG,cAArD,YAmBR,SAASqD,EAAUD,EAAQY,GACzB,GAAIA,EAAQ,EAAG,CACb,IAAIC,EAAevE,EAAUmC,OAASxD,EACtC,OAAQ+E,GACN,IAAK,MACH,OAAQ,kBAACc,EAAD,MACV,IAAK,QACH,OAAQD,EA6KhB,SAAqBD,GACnB,OACE,uBAAGhE,GAAG,QAAQkC,QAASiC,EAAapE,UAAU,UAA9C,SACSiE,EAAQ,EAAI,IAAMA,EAAQ,IAhLTI,CAAYJ,GAAS,KAC7C,IAAK,QACH,OAAQC,EAuMhB,SAAqBD,GACnB,OACE,uBAAGhE,GAAG,QAAQkC,QAASmC,EAAatE,UAAU,UAA9C,SACSiE,EAAQ,EAAI,IAAMA,EAAQ,IA1MTM,CAAYN,GAAS,KAC7C,IAAK,QACH,OAyLR,SAAqBA,GACnB,OACE,uBAAGhE,GAAG,QAAQkC,QAASqC,EAAaxE,UAAU,UAA9C,SACSiE,EAAQ,EAAI,IAAMA,EAAQ,IA5LxBQ,CAAYR,GACrB,IAAK,WACH,OAAQ,kBAACS,EAAD,MACV,QACE,SA8BR,SAASxE,IACP,OACE,4BAAQD,GAAG,SACT,uBAAGA,GAAG,WAAN,+IAGA,2BAAOyD,KAAK,SAASzD,GAAG,YAAY4D,YAAY,cAChD,4BAAQ1B,QAASwC,GAAjB,UAKN,SAASxE,IACP,OACE,yBAAKF,GAAG,aAAaT,MAAO,CAAEC,QAAS,SACrC,4BAAQQ,GAAG,gBAAgBkC,QAASyC,GAApC,YAGA,6BACA,2BAAOlB,KAAK,SAASzD,GAAG,YAAY4D,YAAY,oBAChD,4BAAQ5D,GAAG,iBAAiBkC,QAAS0C,GAArC,cAON,SAASF,IACPtG,EAAaiB,SAASC,eAAe,aAAawE,MAClDzE,SAASC,eAAe,SAASC,MAAMC,QAAU,OACjDH,SAASC,eAAe,cAAcC,MAAMC,QAAU,QAGxD,SAASmF,IACPhG,EAAO0D,KAAK,UAAWjE,EAAYI,EAASD,GAC5CsG,IAGF,SAASA,IACPxF,SAASC,eAAe,cAAcC,MAAMC,QAAU,OACtDH,SAASC,eAAe,YAAYC,MAAMC,QAAU,QAGtD,SAASoF,IACP,IAAME,EAAOzF,SAASC,eAAe,aAAawE,MAClDnF,EAAO0D,KAAK,WAAYyC,EAAM1G,EAAYI,EAASD,GACnDsG,IAOF,SAAS1E,IACP,IACIe,EADA6D,EAAa,GAEjB,IAAK7D,EAAI,EAAGA,EAAI,GAAIA,IAClB6D,EAAWnC,KAAK,yBAAK7C,UAAU,WAC7B,yBAAKmC,QAAS8C,EAAuBjF,UAAU,UAAUC,GAAI,SAAWkB,EAAGZ,IAAK,oBAAsBY,EAAI,OAAQX,IAAI,aAG1H,OACE,yBAAKR,UAAU,cAAcC,GAAG,aAAaT,MAAO,CAAEC,QAAS,SAC7D,wBAAIO,UAAU,aAAd,4BAGCgF,GAKP,SAAS3E,IACP,IACIc,EADA+D,EAAO,GAEX,IAAK/D,EAAI,EAAGA,EAAI,GAAIA,IAClB+D,EAAKrC,KAAK,yBAAK7C,UAAU,WACvB,yBAAKmC,QAASgD,EAAqBnF,UAAU,UAAUC,GAAIvB,EAAQyC,GAAGI,KAAMhB,IAAK,iBAAmB7B,EAAQyC,GAAGqB,OAAQhC,IAAK9B,EAAQyC,GAAGI,SAG3I,OACE,yBAAKvB,UAAU,cAAcC,GAAG,YAAYT,MAAO,CAAEC,QAAS,SAC5D,wBAAIO,UAAU,aAAd,sCAGCkF,GAKP,SAASC,EAAoBC,GAC3B3G,EAAU2G,EAAEC,OAAOpF,GACnBX,SAASC,eAAe,aAAaC,MAAMC,QAAU,OACrDH,SAASC,eAAe,cAAcC,MAAMC,QAAU,QAGxD,SAASwF,EAAsBG,GAC7B5G,EAAgB4G,EAAEC,OAAOpF,GACzBX,SAASC,eAAe,cAAcC,MAAMC,QAAU,OACtDH,SAASC,eAAe,aAAaC,MAAMC,QAAU,QAavD,SAAS0E,IACP,OACE,uBAAGlE,GAAG,MAAMkC,QAASmD,EAAWtF,UAAU,UAA1C,OAMJ,SAASsF,IACP1G,EAAO0D,KAAK,MAAO3C,EAAU4C,KAAMjE,GAGrC,SAASoG,IACP,OACE,uBAAGzE,GAAG,UAAUkC,QAASoD,EAAevF,UAAU,UAAlD,YAMJ,SAASuF,IACP3G,EAAO0D,KAAK,UAAW3C,EAAU4C,KAAMlE,GAWzC,SAAS+F,IAEHrC,IAAsBa,OAAS,IACjCtD,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,SAa7D,SAAS+E,KAYT,SAASF,IACP,IAAIjD,EAAS1B,EAAUyB,QAAQ9C,GAC/B,GAAI+C,EACF,GAAIA,EAAOW,KAAKY,OAAS,EACvBtD,SAASC,eAAe,iBAAiBC,MAAMC,QAAU,aACpD,GAAI4B,EAAOW,KAAKY,OAAS,EAAG,CACjC,IAAIX,EAAMZ,EAAOW,KAAK,GAAGT,KACzB3C,EAAO0D,KAAK,QAAS3C,EAAU4C,KAAMjE,EAAW2D,K,YCxfzCuD,MAjCf,WAME,OACE,yBAAKxF,UAAU,OACb,kBAACzB,EAAD,QCjBckH,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCRSC,EAVM,WAAwB,IAAvBC,EAAsB,uDAAd,EAAG1C,EAAW,uCAC1C,OAAQA,EAAOK,MACb,IAAK,MACH,OAAOqC,EAAQ1C,EAAO2C,QACxB,IAAK,SACH,OAAOD,EAAQ1C,EAAO2C,QACxB,QACE,OAAOD,ICCEE,EARQ,WAA4B,IAA3BF,EAA0B,wDAAX1C,EAAW,uCAChD,OAAQA,EAAOK,MACb,IAAK,SACH,OAAQqC,EACV,QACE,OAAOA,ICKEG,EAVO,WAAwB,IAAvBH,EAAsB,uDAAd,EAAG1C,EAAW,uCAC3C,OAAQA,EAAOK,MACb,IAAK,YACH,OAAOqC,EAAQ,EACjB,IAAK,YACH,OAAOA,EAAQ,EACjB,QACE,OAAOA,ICCEI,EARI,WAAyB,IAAxBJ,EAAuB,uDAAf,GAAI1C,EAAW,uCACzC,OAAQA,EAAOK,MACb,IAAK,SACH,OAAOqC,EAAQ,IAAM1C,EAAO2C,QAC9B,QACE,OAAOD,ICQEK,EAPEC,YAAgB,CAC/BC,OAAQJ,EACRK,QAASN,EACT3E,MAAOwE,EACPzG,IAAK8G,ICDDK,EAAQC,YAAYL,GAE1BM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJlH,SAASC,eAAe,SNkHpB,kBAAmBsH,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhI,QAAQgI,MAAMA,EAAMC,c","file":"static/js/main.0da3a42d.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\nlet playerName;\nlet playerNum;\n\nexport default function Game() {\n  let rabbitPicName;\n  let faveVeg;\n  const allVegs = require('../data/vegetables.json');\n  const socket = io('https://guarded-reaches-28483.herokuapp.com/');\n\n  socket.on('playerNum', handlePlayerNum); //get which player you are\n  socket.on('gameState', handleGameState); //state has changed\n  socket.on('endGame', handleEndGame);\n\n  //socket.on('newOpponent', handleNewOpponent); \n  //todo: pull this out so initial state isn't duplicate in client and server\n  const [gameState, setGameState] = useState({\n    \"room\": \"\",\n    \"isPlaying\": false,\n    \"strikes\": 0,\n    \"players\": {},\n    \"chat\": [],\n    \"turn\": 1\n  });\n  useEffect(() => {\n    document.getElementById(\"roomSelect\").style.display = \"none\";\n    document.getElementById(\"charSelect\").style.display = \"none\";\n    document.getElementById(\"vegSelect\").style.display = \"none\";\n    if (gameState.isPlaying) {\n      document.getElementById(\"gameMain\").style.display = \"block\";\n      document.getElementById(\"intro\").style.display = \"none\";\n      document.getElementById(\"title\").classList.add(\"playingTitle\");\n    } else {\n      document.getElementById(\"gameMain\").style.display = \"none\";\n      document.getElementById(\"intro\").style.display = \"block\";\n    }\n  }, [gameState]);\n\n  return (\n    <center>\n      <h1 className=\"startTitle\" id=\"title\">\n        Hasenpfeffer HEIST!\n      </h1>\n      <GameIntro />\n      <div id=\"gameSelect\">\n        <RoomSelect />\n        <CharSelect />\n        <FaveVegSelect />\n      </div>\n      <GameMain />\n    </center>\n  );\n\n  function GameMain() {\n    return (\n      <div id=\"gameMain\" >\n        <img id=\"garden\" src=\"../land2.png\" alt=\"garden\" />\n        <RoomCodeHeader />\n        <Strikes />\n        <Players />\n        <Inventory />\n        <Chat />\n        <StashDecision />\n        <StealDecision />\n        <EndGame />\n      </div>\n    );\n  }\n\n  function EndGame() {\n    return (\n      <div className=\"decision\" id=\"endGame\">\n        <div className=\"blackout\">\n        </div>\n        <div className=\"decisionMain\">\n          <div className=\"question\">\n            Game Over...{getWinner()} wins!\n            </div>\n          <div className=\"choices\">\n            {Object.values(gameState.players).map((player) =>\n              <div >\n                <img className=\"playersPicMain\" id=\"playerRabbitImg\" src={\"../rabbits/\" + player.rabbitImg + \".png\"} alt=\"rabbit\" />\n                <p className={\"playerName\" + (player.num === gameState.turn ? ' current' : '')}>\n                  {player.name}\n                </p>\n                <p className={\"score\"}>\n                  <b>\n                    score:\n                  </b>\n                  {player.score}\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function getWinner() {\n    let winnerName = \"\";\n    let winnerScore = 0;\n    for (let i in gameState.players) {\n      let player = gameState.players[i];\n      if (player.score === winnerScore) {\n        winnerName += \" \" + player;\n      } else if (player.score > winnerScore) {\n        winnerScore = player.score;\n        winnerName = player.name;\n      }\n    }\n    return winnerName;\n  }\n\n  function StealDecision() {\n    return (\n      <div className=\"decision\" id=\"stealDecision\">\n        <div className=\"blackout\">\n        </div>\n        <div className=\"decisionMain\">\n          <div className=\"question\">\n            Which veggie do you want to steal?\n            </div>\n          <div className=\"choices\">\n            {getStealablePlayers().map((player) =>\n              <div className=\"stealOpponent\">\n                <img className=\"playersPicMain\" id=\"playerRabbitImg\" src={\"../rabbits/\" + player.rabbitImg + \".png\"} alt=\"rabbit\" />\n                <div className=\"opponentVeg\">\n                  {player.paws.map((veg) =>\n                    <div class=\"choiceDiv\">\n                      <img className=\"stashItem choice\" onClick={() => stealSelect(player.num, veg.name)} src={`../vegetables/${veg.vegImg}`} />\n                      <div className=\"vegPoints choice\">\n                        {veg.points}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  function getStealablePlayers() {\n    let stealable = [];\n    for (let i in gameState.players) {\n      let opponent = gameState.players[i];\n      if (opponent.num !== playerNum && opponent.paws.length > 0) {\n        stealable.push(gameState.players[i]);\n\n      }\n    }\n    return stealable;\n  }\n\n  function StashDecision() {\n    let player = gameState.players[playerNum];\n    if (player) {\n      return (\n        <div className=\"decision\" id=\"stashDecision\">\n          <div className=\"blackout\">\n          </div>\n          <div className=\"decisionMain\">\n            <div className=\"question\">\n              Which veggie do you want to stash?\n            </div>\n            <div className=\"choices\">\n              {player.paws.map((veg) =>\n                <div class=\"choice\">\n                  <img className=\"stashItem\" onClick={() => stashSelect(veg.name)} src={`../vegetables/${veg.vegImg}`} />\n                  <div className=\"vegPoints\">\n                    {veg.points}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      );\n    }\n    return null;\n  }\n\n  function Strikes() {\n    return (\n      <div id=\"strikes\">\n        <b>\n          Strikes:\n        </b>\n        {\" \" + gameState.strikes}\n      </div>\n    );\n  }\n\n  function RoomCodeHeader() {\n    return (\n      <div id=\"roomCode\">\n        <b>\n          Room Code:\n          </b>\n        {\" \" + gameState.room}\n      </div>\n    );\n  }\n\n  function Players() {\n    return (\n      <div id=\"players\">\n        {Object.values(gameState.players).map((player) =>\n          <div >\n            <img className=\"playersPicMain\" id=\"playerRabbitImg\" src={\"../rabbits/\" + player.rabbitImg + \".png\"} alt=\"rabbit\" />\n            <p className={\"playerName\" + (player.num === gameState.turn ? ' current' : '')}>\n              {player.name}\n            </p>\n            <p className={\"score\"}>\n              <b>\n                score:\n              </b>\n              {player.score}\n            </p>\n          </div>\n        )\n        }\n      </div >\n    );\n  }\n\n  function Inventory() {\n    return (\n      <div id=\"inventory\">\n        <Actions />\n        <Paws />\n        <Burrow />\n      </div>\n    );\n  }\n\n  function Burrow() {\n    let player = gameState.players[playerNum];\n    if (player) {\n      console.log(player.burrow)\n      return (\n        <div id=\"burrow\">\n          <b className=\"inventoryHeader\">\n            Burrow\n        </b>\n          <br />\n          {player.burrow.map((veg) =>\n            <div class=\"vegDiv\">\n              <img className=\"stashItem\" src={`../vegetables/${veg.vegImg}`} />\n              <div className=\"vegPoints\">\n                {veg.points}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return null;\n\n  }\n\n  function Paws() {\n    let player = gameState.players[playerNum];\n    if (player) {\n      console.log(player.paws)\n      return (\n        <div id=\"paws\">\n          <b className=\"inventoryHeader\">\n            Paws\n        </b>\n          <br />\n          {player.paws.map((veg) =>\n            <div class=\"vegDiv\">\n              <img className=\"stashItem\" src={`../vegetables/${veg.vegImg}`} />\n              <div className=\"vegPoints\">\n                {veg.points}\n              </div>\n            </div>\n          )}\n        </div>\n      );\n    }\n    return null;\n  }\n\n  function Actions() {\n    return (\n      <div id=\"actions\">\n        <b className=\"inventoryHeader\">\n          Actions\n            </b>\n        {mapActions()}\n      </div>\n    );\n  }\n\n  function Chat() {\n    return (\n      <div id=\"chat\">\n        <div id=\"chatbox\">\n          {gameState.chat.map(event =>\n            <>\n              <div className=\"chatEvent\">\n                {mapEvent(event)}\n              </div>\n              <br />\n            </>\n          )}\n        </div>\n        <div id=\"chatControls\">\n          <input type=\"select\" id=\"chatInput\" placeholder=\"Type in the chat...\" />\n          <button onClick={() => submitNewChat(playerName)} id=\"chatButton\">\n            Submit\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  function mapActions() {\n    let actions = [];\n    let player = gameState.players[playerNum];\n    if (player) {\n      for (let action in player.actions) {\n        actions.push(mapAction(action, player.actions[action]));\n      }\n    }\n    return (actions);\n  }\n\n  function mapAction(action, count) {\n    if (count > 0) {\n      let isTheirTurn = (gameState.turn === playerNum);\n      switch (action) {\n        case \"Dig\":\n          return (<ActionDig />);\n        case \"Steal\":\n          return (isTheirTurn ? ActionSteal(count) : null);\n        case \"Stash\":\n          return (isTheirTurn ? ActionStash(count) : null);\n        case \"Block\":\n          return ActionBlock(count);\n        case \"End Turn\":\n          return (<ActionEndTurn />);\n        default:\n          return;\n      }\n    }\n  }\n\n  function mapEvent(event) {\n    switch (event.type) {\n      case \"chat\":\n        return (\n          <div className=\"chatPost\">\n            <b>\n              {event.player}\n            </b>\n            : {event.description}\n          </div>\n        );\n      case \"move\":\n        return (\n          <div className=\"move\">\n            <i>\n              {event.player}\n              {event.description}\n            </i>\n          </div>\n        );\n      default:\n        return;\n    }\n  }\n\n  function GameIntro() {\n    return (\n      <center id=\"intro\">\n        <p id=\"gameDes\">\n          Become the chubbiest bunny in the meadow when you face off against the other buns to steal the most from the garden - but don't get caught!\n      </p>\n        <input type=\"select\" id=\"nameInput\" placeholder=\"Your name\" />\n        <button onClick={handleStart}>Start</button>\n      </center>\n    );\n  }\n\n  function RoomSelect() {\n    return (\n      <div id=\"roomSelect\" style={{ display: \"none\" }}>\n        <button id=\"newGameButton\" onClick={newGame}>\n          New Game\n        </button>\n        <br />\n        <input type=\"select\" id=\"codeInput\" placeholder=\"Enter game code\" />\n        <button id=\"joinGameButton\" onClick={joinGame}>\n          Join Game\n        </button>\n      </div>\n    );\n  }\n\n  function handleStart() {\n    playerName = document.getElementById(\"nameInput\").value;\n    document.getElementById(\"intro\").style.display = \"none\";\n    document.getElementById(\"charSelect\").style.display = \"block\";\n  }\n\n  function newGame() {\n    socket.emit('newGame', playerName, faveVeg, rabbitPicName);\n    init();\n  }\n\n  function init() {\n    document.getElementById(\"roomSelect\").style.display = \"none\";\n    document.getElementById(\"gameMain\").style.display = \"block\";\n  }\n\n  function joinGame() {\n    const code = document.getElementById(\"codeInput\").value;\n    socket.emit('joinGame', code, playerName, faveVeg, rabbitPicName);\n    init();\n  }\n\n  function handlePlayerNum(clientNum) {\n    playerNum = clientNum;\n  }\n\n  function CharSelect() {\n    let characters = [];\n    let i;\n    for (i = 0; i < 15; i++) {\n      characters.push(<div className=\"charDiv\">\n        <img onClick={handleSelectCharacter} className=\"charPic\" id={\"rabbit\" + i} src={\"../rabbits/rabbit\" + i + \".png\"} alt=\"rabbit\" />\n      </div>);\n    }\n    return (\n      <div className=\"startSelect\" id=\"charSelect\" style={{ display: \"none\" }}>\n        <h2 className=\"selectTag\">\n          Choose your character...\n        </h2>\n        {characters}\n      </div>\n    );\n  }\n\n  function FaveVegSelect() {\n    let vegs = [];\n    let i;\n    for (i = 0; i < 15; i++) {\n      vegs.push(<div className=\"charDiv\">\n        <img onClick={handleSelectFaveVeg} className=\"charPic\" id={allVegs[i].name} src={\"../vegetables/\" + allVegs[i].vegImg} alt={allVegs[i].name} />\n      </div>);\n    }\n    return (\n      <div className=\"startSelect\" id=\"vegSelect\" style={{ display: \"none\" }}>\n        <h2 className=\"selectTag\">\n          Choose your favourite vegetable...\n        </h2>\n        {vegs}\n      </div>\n    );\n  }\n\n  function handleSelectFaveVeg(e) {\n    faveVeg = e.target.id;\n    document.getElementById(\"vegSelect\").style.display = \"none\";\n    document.getElementById(\"roomSelect\").style.display = \"block\";\n  }\n\n  function handleSelectCharacter(e) {\n    rabbitPicName = e.target.id;\n    document.getElementById(\"charSelect\").style.display = \"none\";\n    document.getElementById(\"vegSelect\").style.display = \"block\";\n  }\n\n  function handleGameState(newState) {\n    setGameState(JSON.parse(newState));\n  }\n\n  function submitNewChat() {\n    let newChatText = document.getElementById(\"chatInput\").value;\n    document.getElementById(\"chatInput\").value = \"\";\n    socket.emit('newChat', gameState.room, playerName, newChatText);\n  }\n\n  function ActionDig() {\n    return (\n      <p id=\"dig\" onClick={handleDig} className=\"action\">\n        Dig\n      </p>\n    );\n  }\n\n  function handleDig() {\n    socket.emit('dig', gameState.room, playerNum);\n  }\n\n  function ActionEndTurn() {\n    return (\n      <p id=\"endTurn\" onClick={handleEndTurn} className=\"action\">\n        End Turn\n      </p>\n    );\n  }\n\n  function handleEndTurn() {\n    socket.emit('endTurn', gameState.room, playerName);\n  }\n\n  function ActionSteal(count) {\n    return (\n      <p id=\"steal\" onClick={handleSteal} className=\"action\">\n        Steal {count > 1 ? \"x\" + count : \"\"}\n      </p>\n    );\n  }\n\n  function handleSteal() {\n    //might be nobody has anything to steal\n    if (getStealablePlayers().length > 0) {\n      document.getElementById(\"stealDecision\").style.display = \"block\";\n    }\n    //todo tell player nobody to steal from\n  }\n\n  function ActionBlock(count) {\n    return (\n      <p id=\"block\" onClick={handleBlock} className=\"action\">\n        Block {count > 1 ? \"x\" + count : \"\"}\n      </p>\n    );\n  }\n\n  function handleBlock() {\n    //todo tell player they don't need to block until steal\n  }\n\n  function ActionStash(count) {\n    return (\n      <p id=\"stash\" onClick={handleStash} className=\"action\">\n        Stash {count > 1 ? \"x\" + count : \"\"}\n      </p>\n    );\n  }\n\n  function handleStash() {\n    let player = gameState.players[playerNum];\n    if (player) {\n      if (player.paws.length > 1) {\n        document.getElementById(\"stashDecision\").style.display = \"block\";\n      } else if (player.paws.length > 0) {\n        let veg = player.paws[0].name;\n        socket.emit('stash', gameState.room, playerNum, veg);\n      }\n      //todo: tell player they can't stash w no items\n    }\n  }\n\n  function stealSelect(opponentNum, vegName) {\n    console.log(opponentNum + vegName);\n    document.getElementById(\"stealDecision\").style.display = \"none\";\n    socket.emit('steal', gameState.room, playerNum, opponentNum, vegName);\n  }\n\n  function stashSelect(veg) {\n    document.getElementById(\"stashDecision\").style.display = \"none\";\n    socket.emit('stash', gameState.room, playerNum, veg);\n  }\n\n  function handleEndGame() {\n    console.log(\"endGame\");\n    document.getElementById(\"endGame\").style.display = \"block\";\n  }\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { add, reduce } from './actions'\nimport io from 'socket.io-client';\n\n// const socket = io('http://localhost:3000');\n// socket.on('init', handleInit);\n// socket.on('newPlay', handleNewPlay);\n\n// function handleInit(message) {\n//   console.log(message);\n// }\n// function handleNewPlay(message) {\n//   console.log(message);\n// }\n//display store\n//store.subscribe(() => console.log(store.getState()));\n\n//store.dispatch(increment())\nfunction App() {\n  //   const playing = useSelector(state => state.playing);\n  //   const score = useSelector(state => state.score);\n  //   const strike = useSelector(state => state.strike)\n  //   const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\n//function newPlayer(player, player2) {\n//}//\n\n// <h1>\n// {playing ? <h1>playing</h1> : ''}\n// <br />\n// score {score}\n// <br />\n// <button onClick={() => dispatch(add(5))}>\n//   +\n// </button>\n// <button onClick={() => dispatch(reduce(5))}>\n//   -\n// </button>\n// <button onClick={() => newPlayer('beth', 'david')}>\n//   NEW\n// </button>\n// <br />\n// strike {strike}\n// </h1>\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const scoreReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'ADD':\n      return state + action.payload;\n    case 'REDUCE':\n      return state - action.payload;\n    default:\n      return state;\n  }\n}\nexport default scoreReducer;","const playingReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'TOGGLE':\n      return !state;\n    default:\n      return state;\n  }\n}\nexport default playingReducer;","const strikeReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      return state;\n  }\n}\nexport default strikeReducer;","const logReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case 'NEWLOG':\n      return state + \" \" + action.payload;\n    default:\n      return state;\n  }\n}\nexport default logReducer;","import scoreReducer from './score';\nimport playingReducer from './playing';\nimport strikeReducer from './strike';\nimport logReducer from './log'\nimport { combineReducers } from 'redux'\n\nconst reducers = combineReducers({\n  strike: strikeReducer,\n  playing: playingReducer,\n  score: scoreReducer,\n  log: logReducer\n});\n\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}