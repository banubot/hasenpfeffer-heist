{"version":3,"sources":["components/Game.js","App.js","serviceWorker.js","reducers/score.js","reducers/playing.js","reducers/strike.js","reducers/log.js","reducers/index.js","index.js"],"names":["Game","rabbitPicName","faveVeg","playerName","allVegs","require","socket","io","on","clientNum","newPlayerName","console","log","newState","setGameState","JSON","parse","useState","gameState","useEffect","document","getElementById","style","display","isPlaying","classList","add","className","id","GameIntro","RoomSelect","CharSelect","FaveVegSelect","GameMain","src","alt","room","Object","values","players","map","player","rabbitImg","name","type","placeholder","onClick","handleStart","newGame","joinGame","value","emit","init","code","i","characters","push","handleSelectCharacter","vegs","handleSelectFaveVeg","vegImg","e","target","App","Boolean","window","location","hostname","match","scoreReducer","state","action","payload","playingReducer","strikeReducer","logReducer","reducers","combineReducers","strike","playing","score","store","createStore","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.aa320f93.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport io from 'socket.io-client';\n\n\nexport default function Game() {\n  let playerNum;\n  let rabbitPicName;\n  let faveVeg;\n  let playerName;\n  let players = [];\n  const allVegs = require('../data/vegetables.json');\n  const socket = io('http://localhost:3000');\n\n  socket.on('playerNum', handlePlayerNum); //get which player you are\n  socket.on('newPlayer', handleNewPlayer); //notified new player joined\n  socket.on('gameState', handleGameState); //state has changed\n  //socket.on('newOpponent', handleNewOpponent); \n  const [gameState, setGameState] = useState({\n    \"room\": \"\",\n    \"isPlaying\": false,\n    \"strikes\": 0,\n    \"players\": {},\n  });\n  useEffect(() => {\n    //document.getElementById(\"gameMain\").style.display = \"none\";\n    document.getElementById(\"roomSelect\").style.display = \"none\";\n    document.getElementById(\"charSelect\").style.display = \"none\";\n    document.getElementById(\"vegSelect\").style.display = \"none\";\n    if (gameState.isPlaying) {\n      document.getElementById(\"gameMain\").style.display = \"block\";\n      document.getElementById(\"intro\").style.display = \"none\";\n      document.getElementById(\"title\").classList.add(\"playingTitle\");\n    } else {\n      document.getElementById(\"gameMain\").style.display = \"none\";\n      document.getElementById(\"intro\").style.display = \"block\";\n    }\n  }, [gameState]);\n\n  return (\n    <center>\n      <h1 className=\"startTitle\" id=\"title\">\n        Hasenpfeffer HEIST!\n      </h1>\n      <GameIntro />\n      <div id=\"gameSelect\">\n        <RoomSelect />\n        <CharSelect />\n        <FaveVegSelect />\n      </div>\n      <GameMain />\n    </center>\n  );\n\n  function GameMain() {\n    return (\n      <div id=\"gameMain\" >\n        <img id=\"garden\" src=\"../land2.png\" alt=\"garden\" />\n        <p id=\"roomCode\">\n          <b>\n            Room Code:\n          </b>\n          {\" Brown Chestnut of Lorraine\" + gameState.room}\n        </p>\n        <div id=\"players\">\n          {Object.values(gameState.players).map((player) =>\n            <div>\n              <img className=\"playersPicMain\" id=\"playerRabbitImg\" src={\"../rabbits/\" + player.rabbitImg + \".png\"} alt=\"rabbit\" />\n              <p className=\"playerName\">\n                {player.name}\n              </p>\n            </div>\n          )}\n        </div>\n        <div id=\"inventory\">\n          <div id=\"actions\">\n            <b className=\"inventoryHeader\">\n              Actions\n            </b>\n            <p className=\"action\">\n              Swipe\n            </p>\n            <p className=\"action\">\n              Stash\n            </p>\n            <p className=\"action\">\n              Dig\n            </p>\n            <p className=\"action\">\n              Block\n            </p>\n            <p className=\"action\">\n              End Turn\n            </p>\n          </div>\n          <div id=\"paws\">\n            <b className=\"inventoryHeader\">\n              Paws\n            </b>\n            <br />\n            <img className=\"stashItem\" src={\"../vegetables/tomato.png\"} />\n            <img className=\"stashItem\" src={\"../vegetables/tomato.png\"} />\n\n          </div>\n          <div id=\"burrow\">\n            <b className=\"inventoryHeader\">\n              Burrow\n            </b>\n            <br />\n            <img className=\"stashItem\" src={\"../vegetables/tomato.png\"} />\n            <img className=\"stashItem\" src={\"../vegetables/tomato.png\"} />\n            <img className=\"stashItem\" src={\"../vegetables/tomato.png\"} />\n            <img className=\"stashItem\" src={\"../vegetables/tomato.png\"} />\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n  //}\n  function GameIntro() {\n    return (\n      <center id=\"intro\">\n        <p id=\"gameDes\">\n          Become the chubbiest bunny in the meadow when you face off against the other buns to steal the most from the garden - but don't get caught!\n      </p>\n        <input type=\"select\" id=\"nameInput\" placeholder=\"Your name\" />\n        <button onClick={handleStart}>Start</button>\n      </center>\n    );\n  }\n\n  function RoomSelect() {\n    return (\n      <div id=\"roomSelect\" style={{ display: \"none\" }}>\n        <button id=\"newGameButton\" onClick={newGame}>\n          New Game\n        </button>\n        <br />\n        <input type=\"select\" id=\"codeInput\" placeholder=\"Enter game code\" />\n        <button id=\"joinGameButton\" onClick={joinGame}>\n          Join Game\n        </button>\n      </div>\n    );\n  }\n\n  function handleStart() {\n    playerName = document.getElementById(\"nameInput\").value;\n    document.getElementById(\"intro\").style.display = \"none\";\n    document.getElementById(\"charSelect\").style.display = \"block\";\n  }\n\n  function newGame() {\n    socket.emit('newGame', playerName, faveVeg, rabbitPicName);\n    init();\n  }\n\n  function init() {\n    document.getElementById(\"roomSelect\").style.display = \"none\";\n    document.getElementById(\"gameMain\").style.display = \"block\";\n  }\n\n  function joinGame() {\n    const code = document.getElementById(\"codeInput\").value;\n    socket.emit('joinGame', code, playerName, faveVeg, rabbitPicName);\n    init();\n  }\n\n  function handlePlayerNum(clientNum) {\n    playerNum = clientNum;\n  }\n\n  function handleNewPlayer(newPlayerName) {\n    console.log(newPlayerName + \" joined the game\");\n  }\n\n  function CharSelect() {\n    let characters = [];\n    let i;\n    for (i = 0; i < 15; i++) {\n      characters.push(<div className=\"charDiv\">\n        <img onClick={handleSelectCharacter} className=\"charPic\" id={\"rabbit\" + i} src={\"../rabbits/rabbit\" + i + \".png\"} alt=\"rabbit\" />\n      </div>);\n    }\n    return (\n      <div className=\"startSelect\" id=\"charSelect\" style={{ display: \"none\" }}>\n        <h2 className=\"selectTag\">\n          Choose your character...\n        </h2>\n        {characters}\n      </div>\n    );\n  }\n\n  function FaveVegSelect() {\n    let vegs = [];\n    let i;\n    for (i = 0; i < 15; i++) {\n      vegs.push(<div className=\"charDiv\">\n        <img onClick={handleSelectFaveVeg} className=\"charPic\" id={allVegs[i].name} src={\"../vegetables/\" + allVegs[i].vegImg} alt={allVegs[i].name} />\n      </div>);\n    }\n    return (\n      <div className=\"startSelect\" id=\"vegSelect\" style={{ display: \"none\" }}>\n        <h2 className=\"selectTag\">\n          Choose your favourite vegetable...\n        </h2>\n        {vegs}\n      </div>\n    );\n  }\n\n  function handleSelectFaveVeg(e) {\n    faveVeg = e.target.id;\n    document.getElementById(\"vegSelect\").style.display = \"none\";\n    document.getElementById(\"roomSelect\").style.display = \"block\";\n  }\n\n  function handleSelectCharacter(e) {\n    rabbitPicName = e.target.id;\n    document.getElementById(\"charSelect\").style.display = \"none\";\n    document.getElementById(\"vegSelect\").style.display = \"block\";\n  }\n\n  function handleGameState(newState) {\n    console.log(newState)\n    setGameState(JSON.parse(newState));\n  }\n}","import React from 'react';\nimport './App.css';\nimport Game from './components/Game'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { add, reduce } from './actions'\nimport io from 'socket.io-client';\n\n// const socket = io('http://localhost:3000');\n// socket.on('init', handleInit);\n// socket.on('newPlay', handleNewPlay);\n\n// function handleInit(message) {\n//   console.log(message);\n// }\n// function handleNewPlay(message) {\n//   console.log(message);\n// }\n//display store\n//store.subscribe(() => console.log(store.getState()));\n\n//store.dispatch(increment())\nfunction App() {\n  //   const playing = useSelector(state => state.playing);\n  //   const score = useSelector(state => state.score);\n  //   const strike = useSelector(state => state.strike)\n  //   const dispatch = useDispatch();\n\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\n//function newPlayer(player, player2) {\n//}//\n\n// <h1>\n// {playing ? <h1>playing</h1> : ''}\n// <br />\n// score {score}\n// <br />\n// <button onClick={() => dispatch(add(5))}>\n//   +\n// </button>\n// <button onClick={() => dispatch(reduce(5))}>\n//   -\n// </button>\n// <button onClick={() => newPlayer('beth', 'david')}>\n//   NEW\n// </button>\n// <br />\n// strike {strike}\n// </h1>\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const scoreReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'ADD':\n      return state + action.payload;\n    case 'REDUCE':\n      return state - action.payload;\n    default:\n      return state;\n  }\n}\nexport default scoreReducer;","const playingReducer = (state = false, action) => {\n  switch (action.type) {\n    case 'TOGGLE':\n      return !state;\n    default:\n      return state;\n  }\n}\nexport default playingReducer;","const strikeReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return state + 1;\n    case 'DECREMENT':\n      return state - 1;\n    default:\n      return state;\n  }\n}\nexport default strikeReducer;","const logReducer = (state = \"\", action) => {\n  switch (action.type) {\n    case 'NEWLOG':\n      return state + \" \" + action.payload;\n    default:\n      return state;\n  }\n}\nexport default logReducer;","import scoreReducer from './score';\nimport playingReducer from './playing';\nimport strikeReducer from './strike';\nimport logReducer from './log'\nimport { combineReducers } from 'redux'\n\nconst reducers = combineReducers({\n  strike: strikeReducer,\n  playing: playingReducer,\n  score: scoreReducer,\n  log: logReducer\n});\n\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport reducers from './reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(reducers);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}